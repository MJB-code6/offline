function runIDB(data){var openRequest=indexedDB.open("skyport",1);openRequest.onupgradeneeded=function(e){db=e.target.result;db.createObjectStore("redirected",{keyPath:"domain"})},openRequest.onsuccess=function(e){db=e.target.result;var objectStore=db.transaction("redirected","readwrite").objectStore("redirected");if(data){if("queue"===data.command){var retrieveRequest=objectStore.get(registration.scope);retrieveRequest.onsuccess=function(e){var t=retrieveRequest.result.requests;t.push({data:data.info.dataObj,callback:data.info.deferredFunc});objectStore.put({domain:registration.scope,requests:t})}}else if("dequeue"===data.command){var retrieveRequest=objectStore.get(registration.scope);retrieveRequest.onsuccess=function(event){for(var deferredQueue=retrieveRequest.result.requests;navigator.onLine&&deferredQueue.length;){var nextRequest=deferredQueue.shift(),deferredFunc=eval(nextRequest.callback);"function"==typeof deferredFunc&&deferredFunc(JSON.parse(nextRequest.data));var requestUpdate=objectStore.put({domain:registration.scope,requests:deferredQueue})}}}}else objectStore.add({domain:registration.scope,requests:[]})}}function addToCache(e,t,r){var n="sky-"+e;r&&(n+="-v"+r),caches.open(n).then(function(r){"static"===e?(precache&&caches["delete"]("sky-static"),precache=r,t.forEach(function(e,t){r.match(e).then(function(t){t||r.add(e)})}),cleanCache(t)):("dynamic"===e&&(postcache=r),"fallback"===e&&(fallback=r),r.addAll(t).then(function(){}))})}function fetchFromCache(e,t){}function cleanCache(e){caches.keys().then(function(t){t.filter(function(e){return/^sky-static/.test(e)}).forEach(function(t){caches.open(t).then(function(t){t.keys().then(function(r){r.forEach(function(r){e.indexOf(r.url.replace(registration.scope,""))<0&&t["delete"](r)})})})})})}var window;if(!window){var precache=precache||caches.open("sky-static").then(function(e){return e}),postcache=postcache||caches.open("sky-dynamic").then(function(e){return e}),fallback=fallback||caches.open("sky-fallback").then(function(e){return e}),cacheOpen,fallbackURL=registration.scope;self.addEventListener("install",function(e){return self.skipWaiting()}),self.addEventListener("activate",function(e){runIDB(),e.waitUntil(self.clients.claim())}),self.addEventListener("fetch",function(e){e.respondWith(precache.match(e.request).then(function(t){return t?t:navigator.onLine?fetch(e.request).then(function(t){return postcache.match(e.request).then(function(r){return r&&"GET"===e.request.method&&postcache.put(e.request,t.clone()),t})}):postcache.match(e.request).then(function(t){return t?t:/\.html$/.test(e.request.url)?fallback.match(fallbackURL).then(function(e){return e}):void console.error("(SkyPort) Error: a resource ",e.request.url," was not found in cache")})}))}),self.addEventListener("message",function(e){var t=e.data.command,r=e.data.info;return"cacheJSON"===t&&navigator.onLine?fetch(r.fileRoute).then(function(e){return e.json()}).then(function(e){if("cache"===r.cacheType){if(!e["static"]&&!e.dynamic&&!e.fallback)return void console.error("(SkyPort) Error: JSON file passed to 'cache' function must have at least one of the following fields: 'static', 'dynamic', 'fallback'");if(e["static"]){if(!Array.isArray(e["static"]))return void console.error("(SkyPort) Error: static assets must be an array");if(!e.version)return void console.error("(SkyPort) Error: JSON files with static assets must include a version field (number or string)");addToCache("static",e["static"],e.version)}if(e.dynamic){if(!Array.isArray(e.dynamic))return void console.error("(SkyPort) Error: dynamic assets must be an array");addToCache("dynamic",e.dynamic)}e.fallback&&(fallbackURL+=e.fallback.slice(e.fallback.indexOf(e.fallback.match(/\w/))),addToCache("fallback",[e.fallback]))}else if("static"===r.cacheType){if(!e["static"]){if(!e.assets)return void console.error("(SkyPort) Error: JSON file passed to static function must have a 'static' field");e["static"]=e.assets}if(!Array.isArray(e["static"]))return void console.error("(SkyPort) Error: static assets must be an array");if(!e.version)return void console.error("(SkyPort) Error: JSON files with static assets must include a version field (number or string)");addToCache("static",e["static"],e.version)}else if("dynamic"===r.cacheType){if(!e.dynamic){if(!e.assets)return void console.error("(SkyPort) Error: JSON file passed to dynamic function must have a 'dynamic' field");e.dynamic=e.assets}if(!Array.isArray(e.dynamic))return void console.error("(SkyPort) Error: dynamic assets must be an array");addToCache("dynamic",e.dynamic)}}):("cacheArray"===t&&navigator.onLine&&addToCache(r.cacheType,r.assets,r.version||null),"fallback"===t&&(fallbackURL+=r.fileRoute.slice(r.fileRoute.indexOf(r.fileRoute.match(/\w/))),addToCache("fallback",[r.fileRoute])),void("queue"===t&&runIDB(e.data)))})}window&&!function(){function dequeue(){var openRequest=indexedDB.open("skyport",1);openRequest.onsuccess=function(e){var db=e.target.result,objectStore=db.transaction("redirected","readwrite").objectStore("redirected"),retrieveRequest=objectStore.get(window.location.origin+"/");retrieveRequest.onsuccess=function(event){for(var deferredQueue=retrieveRequest.result.requests;navigator.onLine&&deferredQueue.length;){var nextRequest=deferredQueue.shift(),deferredFunc=eval(nextRequest.callback);"function"==typeof deferredFunc&&deferredFunc(JSON.parse(nextRequest.data));var requestUpdate=objectStore.put({domain:window.location.origin+"/",requests:deferredQueue})}}}}function sendToSW(e){function t(){for(;messageQueue.length;)serviceWorker.postMessage(messageQueue.shift())}messageQueue.push(e),serviceWorker?t():navigator.serviceWorker.oncontrollerchange=function(){serviceWorker=navigator.serviceWorker.controller,t()}}if(navigator.serviceWorker){var serviceWorker=navigator.serviceWorker.controller;serviceWorker||navigator.serviceWorker.register("/skyport.js",{scope:"."}).then(function(e){serviceWorker=e.active||e.waiting||e.installing,skyport.dynamic(["/skyport.js"])});var staticStatus=!1,dynamicSatus=!1,staticData,dynamicData;window.skyport=window.skyport||{cache:function(e){return"string"==typeof e&&/\.json$/.test(e)?void sendToSW({command:"cacheJSON",info:{cacheType:"cache",fileRoute:e}}):void console.error("(SkyPort) Error: skyport.cache function parameter must be a JSON file")},"static":function(e,t){return"string"==typeof e&&/\.json$/.test(e)?void sendToSW({command:"cacheJSON",info:{cacheType:"static",fileRoute:e}}):"number"!=typeof e&&"string"!=typeof e?void console.error("(SkyPort) Error: skyport.static must receive a JSON file or a version (number or string) as it's first argument"):Array.isArray(t)?void sendToSW({command:"cacheArray",info:{cacheType:"static",version:e,assets:t}}):void console.error("(SkyPort) Error: assets passed to skyport.static must be either an array (after a version parameter) or a JSON file")},dynamic:function(e){return"string"==typeof e&&/\.json$/.test(e)?void sendToSW({command:"cacheJSON",info:{cacheType:"dynamic",fileRoute:e}}):Array.isArray(e)?void sendToSW({command:"cacheArray",info:{cacheType:"dynamic",assets:e}}):void console.error("(SkyPort) Error: assets passed to skyport.dynamic must be either an array or a JSON file. HINT: skyport.dynamic does not take a version parameter")},fallback:function(e){return e&&"string"==typeof e&&/\.html$/.test(e)?void sendToSW({command:"fallback",info:{fileRoute:e}}):void console.error("(SkyPort) Error: parameter of fallback function must be an HTML file")},direct:function(e,t){return navigator.onLine?t(e):void("function"==typeof t&&sendToSW({command:"queue",info:{dataObj:JSON.stringify(e),deferredFunc:"("+t.toString()+")"}}))},reset:function(){function e(){caches.keys().then(function(e){return Promise.all(e.filter(function(e){return caches["delete"](e)}))}).then(function(){console.log("(SkyPort) Success: SkyPort caches deleted")})}function t(){var e=indexedDB.open("skyport",1);e.onsuccess=function(e){var t=indexedDB.deleteDatabase(e.target.result);t.onsuccess=function(e){console.log("(SkyPort) Success: SkyPort indexedDB deleted")},t.onerror=function(e){console.error("(SkyPort) Error: SkyPort indexedDB not deleted")}}}function r(){navigator.serviceWorker.getRegistrations().then(function(e){for(var t in e)e[t].unregister().then(function(){console.log("(SkyPort) Success: SkyPort service worker deleted")})})}var n=Array.prototype.slice.call(arguments);0===n.length?(e(),t(),r()):n.forEach(function(n){"cache"===n.toLowerCase()?e():"indexeddb"===n.toLowerCase()?t():"sw"===n.toLowerCase()&&r()})}},window.addEventListener("online",function(e){dequeue()}),window.addEventListener("load",function(e){});var messageQueue=messageQueue||[]}}();
